/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 Newhouse (nhitbh at gmail dot com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.fooock.shodan;

import com.fooock.shodan.model.exploit.ExploitCount;
import com.fooock.shodan.model.exploit.ExploitReport;
import io.reactivex.Observable;
import retrofit2.http.GET;
import retrofit2.http.Query;

/**
 * The Exploits API provides access to several exploit/vulnerability data sources.
 */
public interface ExploitService {

    /**
     * Search across a variety of data sources for exploits
     *
     * @param apiKey account api key
     * @param query  exploit query
     */
    @GET("api/search")
    Observable<ExploitReport> search(@Query(Constants.KEY) String apiKey,
                                     @Query(Constants.QUERY) String query);

    /**
     * Search across a variety of data sources for exploits and use facets to get summary information.
     *
     * @param apiKey account api key
     * @param query  exploit query
     * @param facets exploit facet query, separated by comma
     */
    @GET("api/search")
    Observable<ExploitReport> search(@Query(Constants.KEY) String apiKey,
                                     @Query(Constants.QUERY) String query,
                                     @Query(Constants.FACETS) String facets);

    /**
     * Search across a variety of data sources for exploits and use facets to get summary information.
     *
     * @param apiKey account api key
     * @param query  exploit query
     * @param facets exploit facet query, separated by comma
     * @param page   The page number to page through results 100 at a time.
     */
    @GET("api/search")
    Observable<ExploitReport> search(@Query(Constants.KEY) String apiKey,
                                     @Query(Constants.QUERY) String query,
                                     @Query(Constants.FACETS) String facets,
                                     @Query(Constants.PAGE) int page);

    /**
     * This method behaves identical to the "/search" method with the difference that it doesn't
     * return any results.
     *
     * @param apiKey account api key
     * @param query  exploit query
     */
    @GET("api/count")
    Observable<ExploitCount> count(@Query(Constants.KEY) String apiKey,
                                   @Query(Constants.QUERY) String query);

    /**
     * This method behaves identical to the "/search" method with the difference that it doesn't
     * return any results.
     *
     * @param apiKey account api key
     * @param query  exploit query
     * @param facets exploit facet query, separated by comma
     */
    @GET("api/count")
    Observable<ExploitReport> count(@Query(Constants.KEY) String apiKey,
                                    @Query(Constants.QUERY) String query,
                                    @Query(Constants.FACETS) String facets);

}
