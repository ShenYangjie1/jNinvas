/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 Newhouse (nhitbh at gmail dot com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.fooock.shodan.model.exploit;

import com.google.gson.annotations.SerializedName;

import java.util.Arrays;

/**
 * The exploit type contains the normalized data from a variety of vulnerability data sources.
 * The Exploits REST API returns this type for its search results.
 */
public class Exploit {

    @SerializedName("_id")
    private String id;
    private String description;
    private String source;

    private String[] bid;
    private String[] cve;
    private String[] msb;
    private String[] osvdb;

    // Optional properties
    private boolean privileged;

    private int port;

    private String code;
    private String type;
    private String version;
    private String author;

    private String[] platform;

    Exploit() {

    }

    /**
     * @return Unique ID for the exploit/ vulnerability.
     */
    public String getId() {
        return id;
    }

    void setId(String id) {
        this.id = id;
    }

    /**
     * @return A description explaining the details of the exploit.
     */
    public String getDescription() {
        return description;
    }

    void setDescription(String description) {
        this.description = description;
    }

    /**
     * @return The name of the data source. Possible values are: cve, exploitdb, metasploit
     */
    public String getSource() {
        return source;
    }

    void setSource(String source) {
        this.source = source;
    }

    /**
     * @return An array of Bugtraq IDs that reference this vulnerability.
     */
    public String[] getBid() {
        return bid;
    }

    void setBid(String[] bid) {
        this.bid = bid;
    }

    /**
     * @return An array of relevant CVE IDs that reference this exploit.
     */
    public String[] getCve() {
        return cve;
    }

    void setCve(String[] cve) {
        this.cve = cve;
    }

    /**
     * @return An array of Microsoft Security Bulletin reference IDs for this exploit.
     */
    public String[] getMsb() {
        return msb;
    }

    void setMsb(String[] msb) {
        this.msb = msb;
    }

    /**
     * @return An array of OSVDB IDs that are relevant to this exploit.
     */
    public String[] getOsvdb() {
        return osvdb;
    }

    void setOsvdb(String[] osvdb) {
        this.osvdb = osvdb;
    }

    /**
     * @return The port number for the affected service.
     */
    public int getPort() {
        return port;
    }

    void setPort(int port) {
        this.port = port;
    }

    /**
     * @return The author of the exploit/ vulnerability.
     */
    public String getAuthor() {
        return author;
    }

    void setAuthor(String author) {
        this.author = author;
    }

    /**
     * @return The actual code for the exploit.
     */
    public String getCode() {
        return code;
    }

    void setCode(String code) {
        this.code = code;
    }

    /**
     * @return The type of exploit, possible values are: dos, exploit, local, remote, shellcode,
     * webapps
     */
    public String getType() {
        return type;
    }

    void setType(String type) {
        this.type = type;
    }

    /**
     * @return An array of platforms that the exploit targets. Possible values are: aix, cgi, freebsd,
     * hardware, java, jsp, lin_x86, linux, multiple, novell, osx, php, true64, unix, windows
     */
    public String[] getPlatform() {
        return platform;
    }

    void setPlatform(String[] platform) {
        this.platform = platform;
    }

    /**
     * @return true if privileged exploit false if not
     */
    public boolean isPrivileged() {
        return privileged;
    }

    void setPrivileged(boolean privileged) {
        this.privileged = privileged;
    }

    /**
     * @return Version of the exploit
     */
    public String getVersion() {
        return version;
    }

    void setVersion(String version) {
        this.version = version;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Exploit exploit = (Exploit) o;

        if (id != null ? !id.equals(exploit.id) : exploit.id != null) {
            return false;
        }
        if (description != null ? !description.equals(exploit.description)
                : exploit.description != null) {
            return false;
        }
        if (source != null ? !source.equals(exploit.source) : exploit.source != null) {
            return false;
        }
        // Probably incorrect - comparing Object[] arrays with Arrays.equals
        if (!Arrays.equals(bid, exploit.bid)) {
            return false;
        }
        // Probably incorrect - comparing Object[] arrays with Arrays.equals
        if (!Arrays.equals(cve, exploit.cve)) {
            return false;
        }
        // Probably incorrect - comparing Object[] arrays with Arrays.equals
        if (!Arrays.equals(msb, exploit.msb)) {
            return false;
        }
        // Probably incorrect - comparing Object[] arrays with Arrays.equals
        return Arrays.equals(osvdb, exploit.osvdb);
    }

    @Override
    public int hashCode() {
        int result = id != null ? id.hashCode() : 0;
        result = 31 * result + (description != null ? description.hashCode() : 0);
        result = 31 * result + (source != null ? source.hashCode() : 0);
        result = 31 * result + Arrays.hashCode(bid);
        result = 31 * result + Arrays.hashCode(cve);
        result = 31 * result + Arrays.hashCode(msb);
        result = 31 * result + Arrays.hashCode(osvdb);
        return result;
    }

    @Override
    public String toString() {
        return "Exploit{" +
                "id='" + id + '\'' +
                ", description='" + description + '\'' +
                ", source='" + source + '\'' +
                ", bid=" + Arrays.toString(bid) +
                ", cve=" + Arrays.toString(cve) +
                ", msb=" + Arrays.toString(msb) +
                ", osvdb=" + Arrays.toString(osvdb) +
                ", privileged=" + privileged +
                ", port=" + port +
                ", code='" + code + '\'' +
                ", type='" + type + '\'' +
                ", version='" + version + '\'' +
                ", author='" + author + '\'' +
                ", platform=" + Arrays.toString(platform) +
                '}';
    }
}
