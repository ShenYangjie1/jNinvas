package com.jrdm.exploit;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.jrdm.common.Utility;
import com.jrdm.exploit.model.ExploitResponse;

public final class ExploitService {
	
final static Logger logger = Logger.getLogger(ExploitService.class);
private final static Gson gson = new Gson();

    private String exploitUrl = "http://www.exploitsearch.net/json.php";
	
	@SuppressWarnings("unchecked")
	public List<ExploitResponse> searchExploitUrl(String searchStr){

		String sUrl =  exploitUrl + "?q=" + searchStr + "&" + Math.random();
		List<ExploitResponse> exploitList = new ArrayList<ExploitResponse>();
		
		//read directly and manipulate
		try {
			logger.debug("readUrl=" + sUrl);
			String json = readUrl(sUrl);
			
			/*TODO: cannot get references: error This is not a JSON Array.
			 * GsonBuilder gsonBuilder = new GsonBuilder();
			gsonBuilder.registerTypeAdapter(ExploitResponse.class, new ExploitResponseDeserializer());
			Gson gson = gsonBuilder.create();
			
			Type collectionType = new TypeToken<ArrayList<ExploitResponse>>(){}.getType();
			ArrayList<ExploitResponse> resList = (ArrayList<ExploitResponse>)
					gson.fromJson(json, collectionType);*/
			
			ArrayList<ExploitResponse> resList = gson.fromJson(json,  new TypeToken<ArrayList<ExploitResponse>>(){}.getType());
			
			for(ExploitResponse e : resList){
				
				//only when the name matches
				if(Utility.isNotNullEmpty(e.getName())){
					if(e.getName().contains(searchStr)){
						exploitList.add(e); break;
					} 
				}
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return exploitList;
	}


	public ExploitResponse search(String searchStr){

		String sUrl =  exploitUrl + "?q=" + searchStr + "&" + Math.random();
		ExploitResponse exploit = new ExploitResponse();

		try { //read directly and manipulate
			logger.debug("readUrl=" + sUrl);
			String json = readUrl(sUrl);

			ArrayList<ExploitResponse> resList = gson.fromJson(json,  new TypeToken<ArrayList<ExploitResponse>>(){}.getType());

			for(ExploitResponse e : resList){
				//only when the name matches
				if(Utility.isNotNullEmpty(e.getName())){
					if(e.getName().contains(searchStr)){
						exploit = e; break;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return exploit;
	}
	
	
	/**
	 * reads the return string in json format from a url
	 * @author joannarosedelmar
	 * @param urlString
	 * @return
	 * @throws Exception
	 */
    private static String readUrl(String urlString) throws Exception {
        BufferedReader reader = null;
        try {
            URL url = new URL(urlString);
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buffer = new StringBuffer();
            int read;
            char[] chars = new char[1024];
            while ((read = reader.read(chars)) != -1)
                buffer.append(chars, 0, read); 

            return buffer.toString();
        } finally {
            if (reader != null) reader.close();
        }

    }

    public String getExploitUrl() {
        return exploitUrl;
    }

    public void setExploitUrl(String exploitUrl) {
        this.exploitUrl = exploitUrl;
    }
    
}
