package com.jrdm.exploit;

import com.fooock.shodan.ShodanExploitApi;
import com.fooock.shodan.model.exploit.Exploit;
import com.jrdm.common.Utility;
import com.jrdm.exploit.model.ExploitResponse;
import com.jrdm.model.ExploitDto;
import org.apache.log4j.Logger;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by joannarosedelmar on 24/3/17.
 */
public class ShodanExploitService {

    final static Logger logger = Logger.getLogger(ShodanExploitService.class);

    public List<ExploitDto> search(String apiKey, String searchStr){

        ShodanExploitApi apiExploit = new ShodanExploitApi(apiKey);
        List<ExploitDto> exploitDtoList = new ArrayList<ExploitDto>() ;

        apiExploit.search(searchStr)
                .subscribe(t -> {
                    logger.debug("=============================START=============================");
                    //logger.debug("Exploit=>" + searchStr + " Exploits Total Found:" + String.valueOf(t.getTotal()));

                    if (t.getExploits().size() > 0){

                        CvssService cvssService = new CvssService();
                        ExploitService service = new ExploitService();

                        for(Exploit e: t.getExploits()){
                            ExploitResponse response = service.search(e.getId());
                            ExploitDto eDto;

                            //if tag name
                            if ( Utility.isNotNullEmpty(response.getName())){
                                logger.debug("Name " + response.getName() + "found in searchexploit.net");
                                eDto = new ExploitDto(e, response);
                                cvssService.calculate(eDto.getCvssMetric());

                                logger.debug("str=>" + searchStr + " dto codeLink=>" + eDto.getCodeLink());
                            } else {
                                logger.debug("No name " + response.getName() + "found in searchexploit.net");
                                eDto = new ExploitDto(e);
                            }

                            //get the values
                            int r = eDto.getCvssMetric().getRank();
                            if(r >= 5){
                                eDto.setDanger(true);
                            } else if(r == 4){
                                eDto.setWarning(true);
                            } else {
                                eDto.setInfo(true);
                            }

                            logger.debug("e.getCode()=>" + e.getCode());
                            if(Utility.isNotNullEmpty(eDto.getCodeLink()) && eDto.getCodeLink()!="null"){
                                //if code exists, overwrite the rank
                                eDto.setDanger(true);
                                eDto.getCvssMetric().setRank(5);
                            }

                            if(eDto!=null) logger.debug("eDto => " + eDto.toString());
                            else logger.debug("eDto => NULL");
                            exploitDtoList.add(eDto);
                        }

                        //logger.debug("t.getExploits().toString => " + t.getExploits().toString());
                        //logger.debug("exploitDtoList => " + exploitDtoList.toString() );

                    } else {
                        logger.debug("No vulnerabilities from Shodan");
                    }

                }, e -> e.printStackTrace());


        return exploitDtoList;


    }



}
