package com.jrdm.exploit;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import com.jrdm.model.BannerDto;
import org.apache.log4j.Logger;

import com.jrdm.common.MyConstants;
import com.jrdm.common.Utility;
import com.jrdm.model.Misconfiguration;

public class MisconfigService {
	
	final static Logger logger = Logger.getLogger(MisconfigService.class);
	
	private Properties prop = new Properties();
	private List<Misconfiguration> configList = new ArrayList<Misconfiguration>();
	
	/*public static void main(String[] args) {
		MisconfigService sample = new MisconfigService();
		//sample.getConfig();
		
    }*/
	
	public MisconfigService(){
		getConfig();
	}

	private void getConfig(){
		try {
			InputStream in =	getClass().getResourceAsStream(MyConstants.PROP_SHODAN_FILE);
			prop.load(in);

			String startStr = prop.getProperty("misconfig.start");
			String endStr = prop.getProperty("misconfig.end");

			int start = Integer.valueOf( startStr );
			int end = Integer.valueOf( endStr );

			String defaultDesc = prop.getProperty("misconfig.default_rank"); //default-rank

			// get the property value
			//iterate from start - end
			for(int i = start ; i <= end ; i++)
			{
				String rank = String.valueOf(String.valueOf(i));
				String propStr = prop.getProperty(rank);
				String rankDesc = prop.getProperty("misconfig." + rank);
				String desc = defaultDesc;
				if(Utility.isNotNullEmpty(propStr)){
					String[] misStr = propStr.split(",");

					if(Utility.isNotNullEmpty( rankDesc ))
						desc = rankDesc.toUpperCase();

					if( Utility.isNotNullEmpty(misStr)){
						for(String s : misStr){
							Misconfiguration mis = new Misconfiguration(s, i, desc);
							configList.add(mis);
						}
					}
				}

			}
			//logger.debug("configList=" + configList.toString());

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * search through the misconfigurations based on the banners
	 * the config string is separated by space
	 * if the str starts with "-" or "!" then
	 * @author joannarosedelmar
	 * @param banners
	 * @return
	 * @throws Exception
	 */
	public List<Misconfiguration> search( String banners ) throws Exception{
		List<Misconfiguration> misList = new ArrayList<Misconfiguration>();
		if(Utility.isNotNullEmpty(this.configList)){
			
			//get all configuration from the config file
			//and search through this list from the banners
			for(Misconfiguration c : this.configList){
				String[] str = c.getMisconfiguration().split(" "); //router 200 OK
				boolean foundAll = false;
				
				if(str.length>0){
					foundAll = true;
					for(String s: str){
						
						//if substring begins with - or ! 
						//only continue if the banner does not contain the strings
						if(s.substring(0, 1).equals("-") 
								|| s.substring(0, 1).equals("!")){
							
							if(!findMe ( s.substring(1, s.length() ), banners) ){
								//logger.debug("should not be found=>" + s.substring(1, s.length()));
								continue;
							}
								
						} else {
							if(!findMe (s, banners) ){
								//logger.debug("required but not found=>" + s);
								foundAll = false;
								break;
							}
						}
					}
				}
				
				if(foundAll){
					misList.add(c);
				}
			}
			
		} else throw new Exception();
		
		return misList;
		
	}

	public List<Misconfiguration> search(BannerDto bannerDto ) throws Exception{

		String banners = bannerDto.getData();
		List<Misconfiguration> misList = new ArrayList<Misconfiguration>();
		if(Utility.isNotNullEmpty(this.configList)){

			//get all configuration from the config file
			//and search through this list from the banners
			for(Misconfiguration c : this.configList){
				String[] str = c.getMisconfiguration().split(" "); //router 200 OK
				boolean foundAll = false;

				if(str.length>0){
					foundAll = true;
					for(String s: str){
						//if substring begins with - or !
						//only continue if the banner does not contain the strings
						if(s.substring(0, 1).equals("-")
								|| s.substring(0, 1).equals("!")){

							if(!findMe ( s.substring(1, s.length() ), banners) )continue;

						} else {
							if(!findMe (s, banners) ){
								foundAll = false;
								break;
							}
						}
					}
				}

				if(foundAll){
					BannerDto b = new BannerDto();
					b.setPort(bannerDto.getPort());
					b.setData(bannerDto.getData());

					c.setBannerDto(b);
					c.setMisconfigurationForDisplay( cleanForDisplay(c.getMisconfiguration()) );

					misList.add(c);
				}
			}

		} else throw new Exception();

		return misList;

	}
	
	private boolean findMe(String findMe, String srcStr){
		return srcStr.toLowerCase().contains(findMe.toLowerCase().trim());
	}

	private String cleanForDisplay(String str){
	    return str.replace("-", " no ");
    }

}
