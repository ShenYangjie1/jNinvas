package com.jrdm.exploit.model;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.annotations.SerializedName;

public class ExploitResponseDeserializer implements JsonDeserializer<List<ExploitResponse>>{

	@Override
	public List<ExploitResponse> deserialize(JsonElement json,
			Type typeOfT, JsonDeserializationContext context)
			throws JsonParseException {
		
		final List<ExploitResponse> exploitList = new  ArrayList<>();
		
        if (json.isJsonNull()) {
            return exploitList;
        }
        JsonArray jsonArray = json.getAsJsonArray();
        if (jsonArray.isJsonNull()) {
            return exploitList;
        }
        
        for (JsonElement element : jsonArray) {
        	
        	ExploitResponse r = new ExploitResponse();
        	
        	JsonObject jsonObject = element.getAsJsonObject();
            
        	JsonElement name = jsonObject.get("name");
        	JsonElement src = jsonObject.get("src");
        	JsonElement attack_type = jsonObject.get("attack_type");
        	JsonElement info = jsonObject.get("info");
        	JsonElement refs = jsonObject.get("refs");
        	
        	if(name == null || name.isJsonNull()){
        		r.setName("unknown");
        	} else {
        		r.setName(name.getAsString());
        	}
        	if(src == null || src.isJsonNull()){
        		r.setSource("unknown");
        	} else {
        		r.setSource(src.getAsString());
        	}
        	if(attack_type == null || attack_type.isJsonNull()){
        		r.setAttackType("unknown");
        	} else {
        		r.setAttackType(attack_type.getAsString());
        	}
        	
        	//can be string or array => err: Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 
        	if(refs == null || refs.isJsonNull()){
        		//r.setRef(new ExploitReferenceResponse());
        	} else {
        		
        		if(refs.isJsonObject()){
        			
        			ExploitReferenceResponse exploitRef = new ExploitReferenceResponse();
        			
        			JsonObject refAsJsonObject = refs.getAsJsonObject();
                    JsonElement cve = refAsJsonObject.get("CVE");
                    
                    if (cve == null || cve.isJsonNull()) {
                        exploitRef.setCve(new String[0]);
                    } else {
            			JsonArray cveAsJsonArray = cve.getAsJsonArray();
                        String[] cveArray = new String[cveAsJsonArray.size()];
                        for (int i = 0; i < cveAsJsonArray.size(); i++) {
                            cveArray[i] = cveAsJsonArray.get(i).getAsString();
                        }
                        exploitRef.setCve(cveArray);
                    }
                    //r.setRef(exploitRef);
                    
        		} else if(refs.isJsonArray()){
        			//r.setRef(new ExploitReferenceResponse());
        		}
                if(info == null || info.isJsonNull()){
            		r.setInfo(new ExploitInfoResponse());
            	} else {
            		JsonObject infoAsJsonObject = info.getAsJsonObject();
            		JsonElement link = infoAsJsonObject.get("src");
            		JsonElement desc = infoAsJsonObject.get("desc");
            		JsonElement cvss = infoAsJsonObject.get("cvss");
            		JsonElement cp = infoAsJsonObject.get("copyright_title");
            		JsonElement cpLink = infoAsJsonObject.get("copyright_link");
            		
            		
                    ExploitInfoResponse infoResponse = new ExploitInfoResponse();
                    if (link == null || link.isJsonNull()) 
                    	infoResponse.setSourceLink("unknown");
                    else 
                    	infoResponse.setSourceLink(link.getAsString());
                    
                    if (desc == null || desc.isJsonNull()) 
                    	infoResponse.setDescription("unknown");
                     else 
                    	infoResponse.setDescription(desc.getAsString());
                    
                    if (cvss == null || cvss.isJsonNull()) 
                    	infoResponse.setCvss("unknown");
                     else 
                    	infoResponse.setCvss(cvss.getAsString());
                    
                    if (cp == null || cp.isJsonNull()) 
                    	infoResponse.setCopyright("unknown");
                     else 
                    	infoResponse.setCopyright(cp.getAsString());
                    
                    if (cpLink == null || cpLink.isJsonNull()) 
                    	infoResponse.setCopyrightLink("unknown");
                     else 
                    	infoResponse.setCopyrightLink(cpLink.getAsString());
                    
                    r.setInfo(infoResponse);
            	}
	        }
        	exploitList.add(r);
        }
		
		return exploitList;
	}

}
