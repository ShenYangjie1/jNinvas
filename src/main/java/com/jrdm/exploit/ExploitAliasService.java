package com.jrdm.exploit;


import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.jrdm.common.MyConstants;
import com.jrdm.model.ExploitDto;
import com.oracle.tools.packager.IOUtils;
import jdk.nashorn.internal.parser.JSONParser;
import org.apache.log4j.Logger;

import java.io.*;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Created by joannarosedelmar on 6/4/17.
 */
public class ExploitAliasService {

    final static Logger logger = Logger.getLogger(ExploitAliasService.class);

   /* @SuppressWarnings("unchecked")
    public static void main(String[] args) {

        try {
            String cve = "2014-0160";
            String[] tags = new String[]{};

            Gson gson = new Gson();
            //JsonReader reader = new JsonReader(new FileReader(MyConstants.JSON_CVE_FILE));
            JsonReader reader = new JsonReader(new FileReader("/Users/joannarosedelmar/Workspace3_IntelliJ/jNinvas/src/main/resources/cve.json"));
            List<ExploitDto> data = gson.fromJson(reader, new TypeToken<List<ExploitDto>>(){}.getType());

            //find tags and search if found
            for (ExploitDto e : data){
                if(e.getName().contains(cve)){
                    //retrieve the tags for searching
                    tags = e.getTags();
                    break;
                }
            }

            logger.debug("tags=>" + Arrays.toString(tags));


        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    */

   public String[] retrieveAliasOfCve(String cve){
       String[] tags = new String[]{};

       try {
           Gson gson = new Gson();
           Reader reader = new InputStreamReader(getClass().getResourceAsStream("/cve.json"), "UTF-8");
           List<ExploitDto> data = gson.fromJson(reader, new TypeToken<List<ExploitDto>>(){}.getType());

           //find tags and search if found
           for (ExploitDto e : data){
               //logger.debug("name =>" + e.getName() + " contains " + cve);
               if(e.getName().contains(cve)){
                   //retrieve the tags for searching
                   tags = e.getTags();
                   //logger.debug("get tag=>" + Arrays.toString(e.getTags()));
                   break;
               }
           }

           logger.debug("Alias tags=>" + Arrays.toString(tags));


       } catch (Exception e) {
           e.printStackTrace();
       }

       return tags;
   }

}
