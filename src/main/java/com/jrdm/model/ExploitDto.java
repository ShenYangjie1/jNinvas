package com.jrdm.model;

import com.fooock.shodan.model.exploit.Exploit;
import com.fooock.shodan.model.exploit.ExploitReport;
import com.jrdm.common.Utility;
import org.apache.log4j.Logger;

import com.jrdm.exploit.CvssService;
import com.jrdm.exploit.model.ExploitResponse;

import java.util.Arrays;

public class ExploitDto {
	
	private String name;
	private String sourceDb;
	private String attackType;
	private String link;
	private String description;
	private String cvss;
	private String copyright;
	private String copyrightLink;
	private Cvss cvssMetric;
	
	final static Logger logger = Logger.getLogger(ExploitDto.class);

	//from shodan report
    private String id;
    private String source;

    private String[] bid;
    private String[] cve;
    private String[] msb;
    private String[] osvdb;

    private int port;

    private String code;
    private String type;
    private String version;
    private String author;

    private String[] platform;

    //display icons
    private boolean danger = false;
    private boolean warning = false;
    private boolean info = false;

    private boolean codeExploit = false;

    private String[] tags;

    //code is always null because API does not support code retrieval
    //if author is not null and source='ExploitDB' then get the link
    //https://www.exploit-db.com/exploits/{id}
    private String codeLink ;
    private final String EXPLOIT_URL = "https://www.exploit-db.com/exploits/";

    public ExploitDto(){
		
	}

    /**
     *
     * @param s ExploitReport comes from Shodan's Exploit DB
     * @param e ExploitResponse comes from ExploitSearch.Net
     */
    public ExploitDto(Exploit s, ExploitResponse e){

        //Shodan
        this.id = s.getId();
        this.source = s.getSource();
        this.bid = s.getBid();
        this.cve = s.getCve();
        this.msb = s.getMsb();
        this.osvdb = s.getOsvdb();
        this.port = s.getPort();
        this.code = s.getCode();
        this.type = s.getType();
        this.version = s.getVersion();
        this.author = s.getAuthor();
        this.platform = s.getPlatform();
        this.description = s.getDescription();

        //ExploitSearch.Net
        this.name = e.getName();
        this.sourceDb = e.getSource(); //NVD
        this.attackType = e.getAttackType();
        this.link = e.getInfo().getSourceLink();
        this.cvss = e.getInfo().getCvss();
        this.copyright = e.getInfo().getCopyright();
        this.copyrightLink = e.getInfo().getCopyrightLink();
        this.cvssMetric = new Cvss();
        this.cvssMetric.setVector(this.cvss);

        createLink();

    }

    public ExploitDto(Exploit s){

        //Shodan
        this.id = s.getId();
        this.source = s.getSource();
        this.bid = s.getBid();
        this.cve = s.getCve();
        this.msb = s.getMsb();
        this.osvdb = s.getOsvdb();
        this.port = s.getPort();
        this.code = s.getCode();
        this.type = s.getType();
        this.version = s.getVersion();
        this.author = s.getAuthor();
        this.platform = s.getPlatform();
        this.description = s.getDescription();

        createLink();

    }


	public ExploitDto(ExploitResponse e){
		
		this.name = e.getName();
		this.sourceDb = e.getSource();
		this.attackType = e.getAttackType();
		this.link = e.getInfo().getSourceLink();
		this.description = e.getInfo().getDescription();
		this.cvss = e.getInfo().getCvss();
		this.copyright = e.getInfo().getCopyright();
		this.copyrightLink = e.getInfo().getCopyrightLink();
		this.cvssMetric = new Cvss();
		this.cvssMetric.setVector(this.cvss);

		createLink();

	}

	//get URL
    private void createLink(){
	    logger.debug("createLink function=> author=" + this.author + " source=" + source );
	    if(Utility.isNotNullEmpty(this.author)
                && this.author!="null" &&
                this.source.equalsIgnoreCase("ExploitDB") &&
                Utility.isNotNullEmpty(this.id))
        this.codeLink = EXPLOIT_URL + this.id;
    }


	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getSourceDb() {
		return sourceDb;
	}
	public void setSourceDb(String sourceDb) {
		this.sourceDb = sourceDb;
	}
	public String getAttackType() {
		return attackType;
	}
	public void setAttackType(String attackType) {
		this.attackType = attackType;
	}
	public String getLink() {
		return link;
	}
	public void setLink(String link) {
		this.link = link;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	public String getCopyright() {
		return copyright;
	}
	public void setCopyright(String copyright) {
		this.copyright = copyright;
	}
	public String getCopyrightLink() {
		return copyrightLink;
	}
	public void setCopyrightLink(String copyrightLink) {
		this.copyrightLink = copyrightLink;
	}
	public String getCvss() {
		return cvss;
	}
	public void setCvss(String cvss) {
		this.cvss = cvss;
	}


    public Cvss getCvssMetric() {
        return cvssMetric;
    }

    public void setCvssMetric(Cvss cvssMetric) {
        this.cvssMetric = cvssMetric;
    }

    public boolean isDanger() {
        return danger;
    }

    public void setDanger(boolean danger) {
        this.danger = danger;
    }

    public boolean isWarning() {
        return warning;
    }

    public void setWarning(boolean warning) {
        this.warning = warning;
    }

    public boolean isInfo() {
        return info;
    }

    public void setInfo(boolean info) {
        this.info = info;
    }

    public boolean isCodeExploit() {
        return codeExploit;
    }

    public void setCodeExploit(boolean codeExploit) {
        this.codeExploit = codeExploit;
    }

    public String[] getTags() {
        return tags;
    }

    public void setTags(String[] tags) {
        this.tags = tags;
    }


    public String getCodeLink() {
        return codeLink;
    }

    public void setCodeLink(String codeLink) {
        this.codeLink = codeLink;
    }


    @Override
    public String toString() {
        return "ExploitDto{" +
                "name='" + name + '\'' +
                ", sourceDb='" + sourceDb + '\'' +
                ", attackType='" + attackType + '\'' +
                ", link='" + link + '\'' +
                ", description='" + description + '\'' +
                ", cvss='" + cvss + '\'' +
                ", copyright='" + copyright + '\'' +
                ", copyrightLink='" + copyrightLink + '\'' +
                ", cvssMetric=" + cvssMetric +
                ", id='" + id + '\'' +
                ", source='" + source + '\'' +
                ", bid=" + Arrays.toString(bid) +
                ", cve=" + Arrays.toString(cve) +
                ", msb=" + Arrays.toString(msb) +
                ", osvdb=" + Arrays.toString(osvdb) +
                ", port=" + port +
                ", code='" + code + '\'' +
                ", type='" + type + '\'' +
                ", version='" + version + '\'' +
                ", author='" + author + '\'' +
                ", platform=" + Arrays.toString(platform) +
                ", danger=" + danger +
                ", warning=" + warning +
                ", info=" + info +
                ", codeExploit=" + codeExploit +
                ", tags=" + Arrays.toString(tags) +
                ", codeLink='" + codeLink + '\'' +
                '}';
    }
}
